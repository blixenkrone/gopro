version: "3.7"
services:
  frontend:
    image: byrdapp/pro-app:dev
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-network

        - traefik.http.services.frontend-service.loadbalancer.server.port=80
        - traefik.http.routers.frontend.rule=Host(`pro.dev.byrd.news`)
        - traefik.http.routers.frontend.entrypoints=web,websecure
        - traefik.http.routers.frontend.tls.certresolver=httpschallenge
        - traefik.http.middlewares.frontend-redirectscheme.redirectscheme.scheme=https
        - traefik.http.middlewares.frontend-retry.retry.attempts=4
    networks:
      - traefik-network
    depends_on:
      - backend
      - reverse-proxy

  backend:
    image: byrdapp/gopro:dev
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-network
        - traefik.http.routers.backend.rule=Host(`pro.dev.byrd.news`) && PathPrefix(`/api`)
        - traefik.http.routers.backend.entrypoints=pro-api
        - traefik.http.routers.backend.tls.certresolver=httpschallenge
        - traefik.http.services.backend-service.loadbalancer.server.port=3000
    env_file:
      - .env
    command:
      - production=false
    networks:
      - traefik-network
    depends_on:
      - reverse-proxy

  reverse-proxy:
    image: traefik:v2.0.5
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-network
        # - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
        # - traefik.http.routers.http-catchall.entrypoints=web
        # - traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker
        # - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      placement:
        constraints:
          - node.role == manager
    networks:
      - traefik-network
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      # Docker CFG
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.network=traefik-network
      - --providers.docker.swarmMode=true
      # Entrypoints for apps
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.pro-api.address=:3000
      # Certs
      - --certificatesresolvers.httpschallenge.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.httpschallenge.acme.httpchallenge=true
      - --certificatesresolvers.httpschallenge.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.httpschallenge.acme.email=simon@byrd.news
    ports:
      - "80:80"
      - "443:443"
      - "3000:3000"
      - "8080:8080"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  traefik-network:
    driver: overlay
    name: traefik-network

volumes:
  letsencrypt:
